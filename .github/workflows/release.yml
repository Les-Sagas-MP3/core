name: Release

on:
  push:
    branches: [ master ]

jobs:

  verify-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '16'
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      - name: Test snapshot
        run: if [[ "${{ steps.get_version.outputs.VERSION }}" == *"-SNAPSHOT" ]]; then exit 1; else exit 0; fi
      - name: Get release
        id: get_release
        run: echo ::set-output name=RELEASE_HTTP_CODE::$(curl -s -o out.html -w '%{http_code}'  https://github.com/les-sagas-mp3/core/releases/tag/${{ steps.get_version.outputs.VERSION }};)
      - name: Test release existence
        run: if [[ "${{ steps.get_release.outputs.RELEASE_HTTP_CODE }}" -eq "200" ]]; then exit 1; else exit 0; fi

  build:
    needs: verify-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '16'
      - name: Build with Maven
        run: ./mvnw -B clean install spring-boot:build-image --file pom.xml

  release:
    needs: [verify-version, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Config Git
        run: git config user.email "${{ secrets.GIT_CONFIG_EMAIL }}" && git config user.name "${{ secrets.GIT_CONFIG_NAME }}"
      - run: git tag ${{ needs.verify-version.outputs.version }}
      - run: git push origin ${{ needs.verify-version.outputs.version }}
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '16'
      - name: Build with Maven
        run: ./mvnw -B clean install --file pom.xml -P makeRelease
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.verify-version.outputs.version }}
          release_name: ${{ needs.verify-version.outputs.version }}
          draft: false
          prerelease: false
      - name: Upload JAR as artifact
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/target/core-${{ needs.verify-version.outputs.version }}-exec.jar
          asset_name: core-exec.jar
          asset_content_type: application/java-archive

  publish-maven:
    needs: [verify-version, release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: '${{ needs.verify-version.outputs.version }}'
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '16'
      - name: Publish package
        run: mvn -B deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-docker:
    needs: [verify-version, release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: '${{ needs.verify-version.outputs.version }}'
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '16'
      - name: Build with Maven
        run: ./mvnw -B clean spring-boot:build-image --file pom.xml
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      - name: Tag the version image for Docker Hub
        run: docker tag core:${{ steps.get_version.outputs.VERSION }} lessagasmp3/api:${{ steps.get_version.outputs.VERSION }}
      - name: Tag the latest image for Docker Hub
        run: docker tag core:${{ steps.get_version.outputs.VERSION }} lessagasmp3/api:latest
      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Publish latest to Docker Hub
        run: docker push lessagasmp3/api:latest
      - name: Publish version to Docker Hub
        run: docker push lessagasmp3/api:${{ steps.get_version.outputs.VERSION }}

  deploy-production:
    needs: [verify-version, release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: '${{ needs.verify-version.outputs.version }}'
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '16'
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
      - name: Execute deployment remotely
        uses: appleboy/ssh-action@v0.0.7
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key : ${{ secrets.PRODUCTION_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: (nohup /opt/les-sagas-mp3/deploy/core.sh ${{ steps.get_version.outputs.VERSION }} &> /opt/les-sagas-mp3/deploy/core.log < /dev/null &) && exit 0